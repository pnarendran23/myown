//
//  AppDelegate.swift
//  MySampleApp
//
//
// Copyright 2016 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-ios-swift v0.5
//

import UIKit

@UIApplicationMain
class AppDelegate: UIResponder, UIApplicationDelegate {
    var window: UIWindow?
    var x = 0
    var validationneeded = 1
    var timer = Timer()
    var humanexarray = NSMutableArray()
    var transportationarray = NSMutableArray()
    var vc = UIViewController()
    var token = ""
    var launched = 0
    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -> Bool {
        self.shouldRotate = false
        UIApplication.shared.statusBarStyle = .lightContent
        // Override point for customization after application launch.
        
        if(UserDefaults.standard.object(forKey: "countries") == nil){
            DispatchQueue.main.async(execute: {
                self.getstates(credentials().subscription_key)
            })
            
        }
        
        if(UserDefaults.standard.object(forKey: "token") != nil){
            token = UserDefaults.standard.object(forKey: "token") as! String
        }
        
        if(UserDefaults.standard.object(forKey: "humanexarray") != nil){
            humanexarray = (UserDefaults.standard.object(forKey: "humanexarray") as! NSArray).mutableCopy() as! NSMutableArray
        }
        if(UserDefaults.standard.object(forKey: "transportationarray") != nil){
            transportationarray = (UserDefaults.standard.object(forKey: "transportationarray") as! NSArray).mutableCopy() as! NSMutableArray
        }
        
        launched = 1
        
        NotificationCenter.default.addObserver(self, selector: #selector(self.choosewindow(_:)), name:NSNotification.Name(rawValue: "notifywindowchoose"), object: nil)
        
        NotificationCenter.default.addObserver(self, selector: #selector(self.awbanner(_:)), name:NSNotification.Name(rawValue: "awbanner"), object: nil)
        
        NotificationCenter.default.addObserver(self, selector: #selector(self.renewtoken), name:NSNotification.Name(rawValue: "renewtoken"), object: nil)        
        NotificationCenter.default.addObserver(self, selector: #selector(self.gotologin), name:NSNotification.Name(rawValue: "gotologin"), object: nil)
        
        NotificationCenter.default.addObserver(self, selector: #selector(self.performsegue(_:)), name:NSNotification.Name(rawValue: "performsegue"), object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(self.performrootsegue(_:)), name:NSNotification.Name(rawValue: "performrootsegue"), object: nil)
           UserDefaults.standard.set(0, forKey: "instructionsrow")
        UIApplication.shared.statusBarStyle = .default
        
        
       
        // Logged in
         if(UserDefaults.standard.object(forKey: "username") != nil && UserDefaults.standard.object(forKey: "password") != nil){
            let subv = self.window!.subviews
            for obj in subv {
                obj.removeFromSuperview()
            }
            let mainstoryboard = UIStoryboard.init(name: "Main", bundle: nil)
            
            var v = UIViewController()
            var grid = 0
            if(UserDefaults.standard.integer(forKey: "grid") == 1){
                v = mainstoryboard.instantiateViewController(withIdentifier: "grid") as! UINavigationController
            }else{
                v = mainstoryboard.instantiateViewController(withIdentifier: "listofassets") as! UINavigationController
            }
            v.navigationItem.title = "Projects"
            self.window?.rootViewController = v
        }
        
      /*if(validationneeded == 1){
        var subViewArray = self.window!.subviews
        if(NSUserDefaults.standardUserDefaults().objectForKey("token") != nil && NSUserDefaults.standardUserDefaults().objectForKey("username") != nil && NSUserDefaults.standardUserDefaults().objectForKey("password") != nil && NSUserDefaults.standardUserDefaults().objectForKey("assetdata") != nil){
            for obj in subViewArray {
                
                obj.removeFromSuperview()
            }
            var mainstoryboard = UIStoryboard.init(name: "Main", bundle: nil)
            var v = mainstoryboard.instantiateViewControllerWithIdentifier("mediate")
            self.window?.rootViewController = v
            getstates(credentials().subscription_key)
        }else{
            var mainstoryboard = UIStoryboard.init(name: "Main", bundle: nil)
            var v = mainstoryboard.instantiateViewControllerWithIdentifier("login")
            self.window?.rootViewController = v
            }
        }*/
        return true//AWSMobileClient.sharedInstance.didFinishLaunching(application, withOptions: launchOptions)
    }
    
    func gotologin(){
        UserDefaults.standard.removeObject(forKey: "username")
        UserDefaults.standard.removeObject(forKey: "password")
            let subv = self.window!.subviews
            for obj in subv {
                obj.removeFromSuperview()
            }
            let mainstoryboard = UIStoryboard.init(name: "Main", bundle: nil)
            
            var v = UIViewController()
            var grid = 0
                v = mainstoryboard.instantiateViewController(withIdentifier: "login") as! UINavigationController
            self.window?.rootViewController = v
    }
    
    
    func needsvalidation(){
        validationneeded = 1
    }
    
    
    func application(_ application: UIApplication, handleOpen url: URL) -> Bool {
        //print(url)
        
        return true
    }
    
    func maketoast(_ message:String, type:String){
        var color = UIColor()
        if(type == "error"){
            color = UIColor.darkGray
        }else{
            color = UIColor.init(red: 0, green: 183/255, blue: 130/255, alpha: 1)
        }
        if self.window!.rootViewController is UINavigationController {
            // being pushed            
            var vc = (self.window?.rootViewController as! UINavigationController).visibleViewController
            AWBanner.showWithDuration(4.5, delay: 0.0, message: NSLocalizedString(message, comment: ""), backgroundColor: color, textColor: UIColor.white, originY: (vc!.navigationController!.navigationBar.frame.size.height) + (vc!.navigationController!.navigationBar.frame.origin.y))
        }else{
            AWBanner.showWithDuration(4.5, delay: 0.0, message:  NSLocalizedString(message, comment: ""), backgroundColor: color, textColor: UIColor.white)
        }
        
    }
    
    
    func awbanner(_ notification:Notification){
        let message = notification.userInfo!["message"] as! String
        let type = notification.userInfo!["type"] as! String
        maketoast(message, type: type)
    }

    
    
    func application(_ app: UIApplication, open url: URL, options: [UIApplicationOpenURLOptionsKey : Any]) -> Bool {
        
        //print(url)
        
        let queryItems = URLComponents(string: url.absoluteString)?.queryItems
        let param1 = queryItems?.filter({$0.name == "key"}).first
        if(param1?.value != nil){
        var key = param1!.value! as String
        var leedid = ""
        //print(param1?.value)
        let arr = (url.absoluteString.components(separatedBy: "project/")) as [String]
        if(arr.count == 2){
            leedid = arr[1] 
            let temparr =  leedid.components(separatedBy: "/") as NSArray
            if(temparr.count > 1){
                leedid = temparr[0] as! String
                leedid = "1000138806"
                key = "a2Re4fm53J1YTLlGSeIaG89U"
                if(UserDefaults.standard.object(forKey: "username") != nil){
                    //Already logged in
                    if(UserDefaults.standard.object(forKey: "building_details") != nil){
                        let current_dict = NSKeyedUnarchiver.unarchiveObject(with: UserDefaults.standard.object(forKey: "building_details") as! Data) as! NSDictionary
                        if(current_dict["leed_id"] as! Int == Int(leedid)!){
                            gotomore(true)
                        }else{
                            //other project
                          //  self.getbuilding(self.token, subscription_key: credentials().subscription_key, token_type: "Bearer", domain_url: credentials().domain_url,leedid: leedid)
                            self.getbuilding(self.token, subscription_key: credentials().subscription_key, token_type: "Bearer", domain_url: credentials().domain_url,leedid: leedid, key: key, loggedin : true)
                        }
                    }else{
                        //other project
                        self.getbuilding(self.token, subscription_key: credentials().subscription_key, token_type: "Bearer", domain_url: credentials().domain_url,leedid: leedid, key: key, loggedin : true)
                    }
                }else{
                    //other project
                    self.getbuilding(self.token, subscription_key: credentials().subscription_key, token_type: "Bearer", domain_url: credentials().domain_url,leedid: leedid, key: key, loggedin : false)
                }
                
                
                
                
            }
            
            
        }else{
            DispatchQueue.main.async(execute: {
                let alertController = UIAlertController(title: "Invalid URL", message: "Please try again using a valid URL to submit the survey", preferredStyle: .actionSheet)
                let okAction = UIAlertAction(title: "OK", style: UIAlertActionStyle.default) {
                    UIAlertAction in
                    NSLog("OK Pressed")
                }
                alertController.addAction(okAction)
                self.window?.rootViewController?.present(alertController, animated: true, completion: nil)
            })
            }
        //print("LEED ID and key is ",leedid,key)
        }
        return true
    }
    
    func gotomore(_ loggedin : Bool){
        let subv = self.window!.subviews
        for obj in subv {
            obj.removeFromSuperview()
        }
        let mainstoryboard = UIStoryboard.init(name: "Main", bundle: nil)
        var v = UIViewController()
        var grid = 0
        if(loggedin == true){
        if(UserDefaults.standard.integer(forKey: "grid") == 1){
            v = mainstoryboard.instantiateViewController(withIdentifier: "grid") as! UINavigationController
        }else{
            v = mainstoryboard.instantiateViewController(withIdentifier: "listofassets") as! UINavigationController
        }
        v.navigationItem.title = "Projects"
        self.window?.rootViewController = v
        
        let viewController = mainstoryboard.instantiateViewController(withIdentifier: "more")
        let rootViewController = self.window!.rootViewController as! UINavigationController
        rootViewController.pushViewController(viewController, animated: false)
        let set = mainstoryboard.instantiateViewController(withIdentifier: "smiley")
        rootViewController.pushViewController(set, animated: false)
        }else{
                v = mainstoryboard.instantiateViewController(withIdentifier: "login_nav") as! UINavigationController
            self.window?.rootViewController = v
            let viewController = mainstoryboard.instantiateViewController(withIdentifier: "more")
            let rootViewController = self.window!.rootViewController as! UINavigationController
            rootViewController.pushViewController(viewController, animated: false)
            let set = mainstoryboard.instantiateViewController(withIdentifier: "smiley")
            rootViewController.pushViewController(set, animated: false)
        }
    }
    
    
    func performsegue(_ notification:Notification){
        let subv = self.window!.subviews
        for obj in subv {
            obj.removeFromSuperview()
        }
        let seguename = notification.userInfo!["seguename"] as! String
        let mainstoryboard = UIStoryboard.init(name: "Main", bundle: nil)
        var v = UIViewController()
        var grid = 0
        if(UserDefaults.standard.integer(forKey: "grid") == 1){
            v = mainstoryboard.instantiateViewController(withIdentifier: "grid") as! UINavigationController
        }else{
            v = mainstoryboard.instantiateViewController(withIdentifier: "listofassets") as! UINavigationController
        }
        v.navigationItem.title = "Projects"
        self.window?.rootViewController = v
        
        let viewController = mainstoryboard.instantiateViewController(withIdentifier: "more")
        let rootViewController = self.window!.rootViewController as! UINavigationController
        rootViewController.pushViewController(viewController, animated: false)
        var s = ""
        if(seguename != ""){
        if(seguename == "gotohuman"){
            s = "smiley"
        }else if(seguename == "gototransit"){
            s = "addnewroute"
        }else if(seguename == "gotolistroutes"){
            s = "listroutes"
            }
        let set = mainstoryboard.instantiateViewController(withIdentifier: s)
        rootViewController.pushViewController(set, animated: false)
        }
        //controllers.append(listroutes)
    }
    
    func performrootsegue(_ notification:Notification){
        let subv = self.window!.subviews
        for obj in subv {
            obj.removeFromSuperview()
        }
        let seguename = notification.userInfo!["seguename"] as! String
        let mainstoryboard = UIStoryboard.init(name: "Main", bundle: nil)
        
        var v = UIViewController()
        var grid = 0
        if(UserDefaults.standard.integer(forKey: "grid") == 1){
        v = mainstoryboard.instantiateViewController(withIdentifier: "grid") as! UINavigationController
        }else{
        v = mainstoryboard.instantiateViewController(withIdentifier: "listofassets") as! UINavigationController    
        }
        v.navigationItem.title = "Projects"
        self.window?.rootViewController = v
        let viewController = mainstoryboard.instantiateViewController(withIdentifier: seguename)
        let rootViewController = self.window!.rootViewController as! UINavigationController
        rootViewController.hidesBarsOnTap = false
        rootViewController.hidesBarsOnSwipe = false
        rootViewController.hidesBarsWhenKeyboardAppears = false
        rootViewController.hidesBarsWhenVerticallyCompact = false
        rootViewController.isNavigationBarHidden = false
        rootViewController.automaticallyAdjustsScrollViewInsets = false
        rootViewController.pushViewController(viewController, animated: false)
        //self.window?.rootViewController = v
    }
    
    
    func renewtoken(){
        let mainstoryboard = UIStoryboard.init(name: "Main", bundle: nil)
        var v = UIViewController()
        v = mainstoryboard.instantiateViewController(withIdentifier: "intermediate") 
        self.window?.rootViewController?.present(v, animated: true, completion: nil)
    }
    var shouldRotate = true
    
    
    //MARK: - Func to rotate only one view controller
    func application(_ application: UIApplication, supportedInterfaceOrientationsFor window: UIWindow?) -> UIInterfaceOrientationMask {
        
        if (shouldRotate == true){
            return UIInterfaceOrientationMask.all
        }
        
        return UIInterfaceOrientationMask.portrait
        
    }
    
    func choosewindow(_ notification:Notification){
        ////print(notification.userInfo)
        let foreign_id = notification.userInfo!["foreign_id"] as! String
        
        if(foreign_id == "updated_userManual")
        {
        }
        else if(foreign_id == "data_input_human")
        {
            let subv = self.window!.subviews
            for obj in subv {
                obj.removeFromSuperview()
            }
            let mainstoryboard = UIStoryboard.init(name: "Main", bundle: nil)
            
            let datakeyed = UserDefaults.standard.object(forKey: "actions_data") as! Data
            let assets = (NSKeyedUnarchiver.unarchiveObject(with: datakeyed) as! NSDictionary).mutableCopy() as! NSMutableDictionary
            let currentarr = (assets["EtScorecardList"]! as! NSArray).mutableCopy() as! NSMutableArray
            
            var arr = NSMutableDictionary()
            var sel = 0
            for i in 0..<currentarr.count {
                var temparr = currentarr.object(at: i) as! NSMutableDictionary
                if(temparr["CreditDescription"] as! String == "Human Experience"){
                    sel = i
                    break
                }
            }
            UserDefaults.standard.set(sel, forKey: "selected_action")
            let data = NSKeyedArchiver.archivedData(withRootObject: currentarr)
            UserDefaults.standard.set(data, forKey: "currentcategory")
            let v = mainstoryboard.instantiateViewController(withIdentifier: "waste")
            self.window?.rootViewController = v
        }
        else if(foreign_id == "data_input_transportation")
        {
            let subv = self.window!.subviews
            for obj in subv {
                obj.removeFromSuperview()
            }
                let mainstoryboard = UIStoryboard.init(name: "Main", bundle: nil)
            
            let datakeyed = UserDefaults.standard.object(forKey: "actions_data") as! Data
            let assets = (NSKeyedUnarchiver.unarchiveObject(with: datakeyed) as! NSDictionary).mutableCopy() as! NSMutableDictionary
            let currentarr = (assets["EtScorecardList"]! as! NSArray).mutableCopy() as! NSMutableArray
            
            var arr = NSMutableDictionary()
            var sel = 0
            for i in 0..<currentarr.count {
                var temparr = currentarr.object(at: i) as! NSMutableDictionary
                if(temparr["CreditDescription"] as! String == "Transportation"){
                    sel = i
                    break
                }
            }
             UserDefaults.standard.set(sel, forKey: "selected_action")
                let data = NSKeyedArchiver.archivedData(withRootObject: currentarr)
                UserDefaults.standard.set(data, forKey: "currentcategory")
                let v = mainstoryboard.instantiateViewController(withIdentifier: "waste")
                self.window?.rootViewController = v
                
        }
        else if(foreign_id == "data_input_waste")
        {
            let subv = self.window!.subviews
            for obj in subv {
                obj.removeFromSuperview()
            }
            let mainstoryboard = UIStoryboard.init(name: "Main", bundle: nil)
            
            let datakeyed = UserDefaults.standard.object(forKey: "actions_data") as! Data
            let assets = (NSKeyedUnarchiver.unarchiveObject(with: datakeyed) as! NSDictionary).mutableCopy() as! NSMutableDictionary
            let currentarr = (assets["EtScorecardList"]! as! NSArray).mutableCopy() as! NSMutableArray
            
            var arr = NSMutableDictionary()
            var sel = 0
            for i in 0..<currentarr.count {
                var temparr = currentarr.object(at: i) as! NSMutableDictionary
                if(temparr["CreditDescription"] as! String == "Waste"){
                    sel = i
                    break
                }
            }
            UserDefaults.standard.set(sel, forKey: "selected_action")
            let data = NSKeyedArchiver.archivedData(withRootObject: currentarr)
            UserDefaults.standard.set(data, forKey: "currentcategory")
            let v = mainstoryboard.instantiateViewController(withIdentifier: "waste")
            self.window?.rootViewController = v
        }
        else if(foreign_id == "data_input_water")
        {
            let subv = self.window!.subviews
            for obj in subv {
                obj.removeFromSuperview()
            }
            let mainstoryboard = UIStoryboard.init(name: "Main", bundle: nil)
            
            let datakeyed = UserDefaults.standard.object(forKey: "actions_data") as! Data
            let assets = (NSKeyedUnarchiver.unarchiveObject(with: datakeyed) as! NSDictionary).mutableCopy() as! NSMutableDictionary
            let currentarr = (assets["EtScorecardList"]! as! NSArray).mutableCopy() as! NSMutableArray
            
            var arr = NSMutableDictionary()
            var sel = 0
            for i in 0..<currentarr.count {
                var temparr = currentarr.object(at: i) as! NSMutableDictionary
                if(temparr["CreditDescription"] as! String == "Water"){
                    sel = i
                    break
                }
            }
            UserDefaults.standard.set(sel, forKey: "selected_action")
            let data = NSKeyedArchiver.archivedData(withRootObject: currentarr)
            UserDefaults.standard.set(data, forKey: "currentcategory")
            let v = mainstoryboard.instantiateViewController(withIdentifier: "datainput")
            self.window?.rootViewController = v
        }
        else if(foreign_id == "data_input_energy")
        {
            let subv = self.window!.subviews
            for obj in subv {
                obj.removeFromSuperview()
            }
            let mainstoryboard = UIStoryboard.init(name: "Main", bundle: nil)
            
            let datakeyed = UserDefaults.standard.object(forKey: "actions_data") as! Data
            let assets = (NSKeyedUnarchiver.unarchiveObject(with: datakeyed) as! NSDictionary).mutableCopy() as! NSMutableDictionary
            let currentarr = (assets["EtScorecardList"]! as! NSArray).mutableCopy() as! NSMutableArray
            
            var arr = NSMutableDictionary()
            var sel = 0
            for i in 0..<currentarr.count {
                var temparr = currentarr.object(at: i) as! NSMutableDictionary
                if(temparr["CreditDescription"] as! String == "Energy"){
                    sel = i
                    break
                }
            }
            UserDefaults.standard.set(sel, forKey: "selected_action")
            let data = NSKeyedArchiver.archivedData(withRootObject: currentarr)
            UserDefaults.standard.set(data, forKey: "currentcategory")
            let v = mainstoryboard.instantiateViewController(withIdentifier: "datainput")
            self.window?.rootViewController = v
        }
        else if(foreign_id == "data_input_operating_hours")
        {
            let subv = self.window!.subviews
            for obj in subv {
                obj.removeFromSuperview()
            }
            let mainstoryboard = UIStoryboard.init(name: "Main", bundle: nil)
            let v = mainstoryboard.instantiateViewController(withIdentifier: "manageproject")
            self.window?.rootViewController = v
        }
        else if(foreign_id == "data_input_density")
        {
            let subv = self.window!.subviews
            for obj in subv {
                obj.removeFromSuperview()
            }
            let mainstoryboard = UIStoryboard.init(name: "Main", bundle: nil)
            let v = mainstoryboard.instantiateViewController(withIdentifier: "manageproject")
            self.window?.rootViewController = v
        }
        else if(foreign_id == "data_input_occupancy")
        {
            let subv = self.window!.subviews
            for obj in subv {
                obj.removeFromSuperview()
            }
            let mainstoryboard = UIStoryboard.init(name: "Main", bundle: nil)
            let v = mainstoryboard.instantiateViewController(withIdentifier: "manageproject")
            self.window?.rootViewController = v
        }
        else if(foreign_id == "data_input_gfa")
        {
            let subv = self.window!.subviews
            for obj in subv {
                obj.removeFromSuperview()
            }
            let mainstoryboard = UIStoryboard.init(name: "Main", bundle: nil)
            let v = mainstoryboard.instantiateViewController(withIdentifier: "manageproject")
            self.window?.rootViewController = v
        }
        else if(foreign_id == "skipped_teamManagement")
        {
            
        }
        else if(foreign_id == "skipped_payment")
        {
            
        }
        else if(foreign_id == "skipped_agreement")
        {
            
        }
        else if(foreign_id == "score_computation")
        {
            
        }
        else if(foreign_id == "request_access")
        {
            
        }
        else if(foreign_id == "review_Completed")
        {
            
        }

    }
    
    func checkcredit_type(_ tempdict:NSMutableDictionary) -> String {
        var temp = ""
        if(tempdict["CreditcategoryDescrption"] as! String == "Performance" || tempdict["CreditcategoryDescrption"] as! String == "Performance Category"){
            temp = "Data input"
        }
        else if((tempdict["Mandatory"] as! String != "X") && (tempdict["CreditcategoryDescrption"] as! String != "Performance" || tempdict["CreditcategoryDescrption"] as! String != "Performance Category")){
            temp = "Base scores"
        }else if(tempdict["Mandatory"] as! String == "X"){
            temp = "Pre-requisites"
        }
        
        return temp
    }
    
    
    func checkcredentials(_ subscription_key:String){
        let url = URL.init(string:String(format: "%@assets/LEED:%d/analysis/",credentials().domain_url, UserDefaults.standard.integer(forKey: "leed_id")))
        //////print(url?.absoluteURL)
        
        let request = NSMutableURLRequest.init(url: url!)
        request.httpMethod = "GET"
        request.addValue(subscription_key, forHTTPHeaderField:"Ocp-Apim-Subscription-Key" )
        request.addValue("application/json", forHTTPHeaderField:"Content-type" )
        request.addValue(String(format:"Bearer %@",token), forHTTPHeaderField:"Authorization" )
        var task = URLSession.shared.dataTask(with: request as URLRequest, completionHandler: { data, response, error in
            guard error == nil && data != nil else {                                                          // check for fundamental networking error
                ////print("error=\(error)")
                NotificationCenter.default.post(name: Notification.Name(rawValue: "notifyclose"), object: nil)
                return
            }
            
            if let httpStatus = response as? HTTPURLResponse, httpStatus.statusCode != 200 {           // check for http errors
                ////print("statusCode should be 200, but is \(httpStatus.statusCode)")
                ////print("response = \(response)")
                DispatchQueue.main.async(execute: {
                    self.signin()
                })
            }else{
                //
                var jsonDictionary : NSDictionary
                do {
                    jsonDictionary = try JSONSerialization.jsonObject(with: data!, options: JSONSerialization.ReadingOptions()) as! NSDictionary
                    ////print(jsonDictionary)
                    DispatchQueue.main.async(execute: {
                        
                        var subv = self.window!.subviews
                        for obj in subv {
                            obj.removeFromSuperview()
                        }
                        if(self.launched == 1){
                            var mainstoryboard = UIStoryboard.init(name: "Main", bundle: nil)
                            if(UserDefaults.standard.integer(forKey: "grid") == 0){
                                var v = mainstoryboard.instantiateViewController(withIdentifier: "listofassets")
                                self.window?.rootViewController = v
                                self.validationneeded = 0
                            }else{
                                var v = mainstoryboard.instantiateViewController(withIdentifier: "gridview")
                                self.window?.rootViewController = v
                                self.validationneeded = 0
                            }
                            
                        }else{
                            var mainstoryboard = UIStoryboard.init(name: "Main", bundle: nil)
                            if(self.vc.title != nil){
                            var v = mainstoryboard.instantiateViewController(withIdentifier: self.vc.title!)
                            self.window?.rootViewController = v
                            }else{
                                if(UserDefaults.standard.integer(forKey: "grid") == 0){
                                    var v = mainstoryboard.instantiateViewController(withIdentifier: "listofassets")
                                    self.window?.rootViewController = v
                                    self.validationneeded = 0
                                }else{
                                    var v = mainstoryboard.instantiateViewController(withIdentifier: "gridview")
                                    self.window?.rootViewController = v
                                    self.validationneeded = 0
                                }

                            }
                            self.validationneeded = 0
                                
                        }
                    })
                    
                    //self.tableview.reloadData()
                    // self.buildingactions(subscription_key, leedid: leedid)
                } catch {
                    ////print(error)
                    DispatchQueue.main.async(execute: {
                        self.signin()
                    })
                }
            }
            
        }) 
        task.resume()
        
    }
    
    
    
    
    
    func getstates(_ subscription_key:String){
        let url = URL.init(string:String(format: "%@country/states/",credentials().domain_url))
        //////print(url?.absoluteURL)
        
        let request = NSMutableURLRequest.init(url: url!)
        request.httpMethod = "GET"
        request.addValue(subscription_key, forHTTPHeaderField:"Ocp-Apim-Subscription-Key" )
        request.addValue("application/json", forHTTPHeaderField:"Content-type" )
        request.addValue(String(format:"Bearer %@",token), forHTTPHeaderField:"Authorization" )
        var task = URLSession.shared.dataTask(with: request as URLRequest, completionHandler: { data, response, error in
            guard error == nil && data != nil else {                                                          // check for fundamental networking error
                ////print("error=\(error)")
                NotificationCenter.default.post(name: Notification.Name(rawValue: "notifyclose"), object: nil)
                return
            }
            
            if let httpStatus = response as? HTTPURLResponse, httpStatus.statusCode != 200 {           // check for http errors
                ////print("statusCode should be 200, but is \(httpStatus.statusCode)")
                ////print("response = \(response)")
                DispatchQueue.main.async(execute: {
                    self.signin()
                })
            }else{
                //
                var jsonDictionary : NSDictionary
                do {
                    jsonDictionary = try JSONSerialization.jsonObject(with: data!, options: JSONSerialization.ReadingOptions()) as! NSDictionary
                    ////print(jsonDictionary)
                    DispatchQueue.main.async(execute: {
                        let data = NSKeyedArchiver.archivedData(withRootObject: jsonDictionary)
                        UserDefaults.standard.set(data, forKey: "countries")
                       
                    })
                    
                    //self.tableview.reloadData()
                    // self.buildingactions(subscription_key, leedid: leedid)
                } catch {
                    ////print(error)
                    DispatchQueue.main.async(execute: {
                        
                    })
                }
            }
            
        }) 
        task.resume()
        
    }
    
    func getrequiredfields(_ subscription_key:String){
        let url = URL.init(string:String(format: "%@assets/LEED:%d/requiredfields/?page=all",credentials().domain_url,UserDefaults.standard.integer(forKey: "leed_id")))
        //////print(url?.absoluteURL)
        
        let request = NSMutableURLRequest.init(url: url!)
        request.httpMethod = "GET"
        request.addValue(subscription_key, forHTTPHeaderField:"Ocp-Apim-Subscription-Key" )
        request.addValue("application/json", forHTTPHeaderField:"Content-type" )
        request.addValue(String(format:"Bearer %@",token), forHTTPHeaderField:"Authorization" )
        var task = URLSession.shared.dataTask(with: request as URLRequest, completionHandler: { data, response, error in
            guard error == nil && data != nil else {                                                          // check for fundamental networking error
                ////print("error=\(error)")
                NotificationCenter.default.post(name: Notification.Name(rawValue: "notifyclose"), object: nil)
                return
            }
            
            if let httpStatus = response as? HTTPURLResponse, httpStatus.statusCode != 200 {           // check for http errors
                ////print("statusCode should be 200, but is \(httpStatus.statusCode)")
                ////print("response = \(response)")
                DispatchQueue.main.async(execute: {
                    //self.signin()
                })
            }else{
                //
                var jsonDictionary : NSArray
                do {
                    
                        self.getnotifications(subscription_key)
                    
                    //self.tableview.reloadData()
                    // self.buildingactions(subscription_key, leedid: leedid)
                } catch {
                    ////print(error)
                    DispatchQueue.main.async(execute: {
                        self.signin()
                    })
                }
            }
            
        }) 
        task.resume()
        
    }


    
    
    func getnotifications(_ subscription_key:String){
        let url = URL.init(string:String(format: "%@assets/LEED:%d/notifications/",credentials().domain_url,UserDefaults.standard.integer(forKey: "leed_id")))
        //////print(url?.absoluteURL)
        
        let request = NSMutableURLRequest.init(url: url!)
        request.httpMethod = "GET"
        request.addValue(subscription_key, forHTTPHeaderField:"Ocp-Apim-Subscription-Key" )
        request.addValue("application/json", forHTTPHeaderField:"Content-type" )
        request.addValue(String(format:"Bearer %@",token), forHTTPHeaderField:"Authorization" )
        var task = URLSession.shared.dataTask(with: request as URLRequest, completionHandler: { data, response, error in
            guard error == nil && data != nil else {                                                          // check for fundamental networking error
                ////print("error=\(error)")
                NotificationCenter.default.post(name: Notification.Name(rawValue: "notifyclose"), object: nil)
                return
            }
            
            if let httpStatus = response as? HTTPURLResponse, httpStatus.statusCode != 200 {           // check for http errors
                ////print("statusCode should be 200, but is \(httpStatus.statusCode)")
                ////print("response = \(response)")
                DispatchQueue.main.async(execute: {
                    self.signin()
                })
            }else{
                //
                var jsonDictionary : NSArray
                do {
                    jsonDictionary = try JSONSerialization.jsonObject(with: data!, options: JSONSerialization.ReadingOptions()) as! NSArray
                    ////print(jsonDictionary)
                    DispatchQueue.main.async(execute: {
                        let data = NSKeyedArchiver.archivedData(withRootObject: jsonDictionary)
                        UserDefaults.standard.set(data, forKey: "notifications")
                        self.checkcredentials(subscription_key)
                    })
                    
                    //self.tableview.reloadData()
                    // self.buildingactions(subscription_key, leedid: leedid)
                } catch {
                    ////print(error)
                    DispatchQueue.main.async(execute: {
                        self.signin()
                    })
                }
            }
            
        }) 
        task.resume()
        
    }

    
    
    func getbuilding(_ token:String,subscription_key:String,token_type:String, domain_url:String, leedid : String, key: String, loggedin : Bool){
        let url = URL.init(string: String(format: "%@assets/LEED:%@/scores/",domain_url,leedid))
        let request = NSMutableURLRequest.init(url: url!)
        request.httpMethod = "GET"
        request.addValue(subscription_key, forHTTPHeaderField:"Ocp-Apim-Subscription-Key" )
        request.addValue("application/json", forHTTPHeaderField:"Content-type" )
        //request.addValue(String(format:"Bearer %@",token), forHTTPHeaderField:"Authorization" )
        let task = URLSession.shared.dataTask(with: request as URLRequest, completionHandler: { data, response, error in
            guard error == nil && data != nil else {                                                          // check for fundamental networking error
                //print("error=\(error)")
                DispatchQueue.main.async(execute: {
                    var alertController = UIAlertController(title: "Error", message: "Something went wrong. Please try again later", preferredStyle: .actionSheet)
                    var okAction = UIAlertAction(title: "OK", style: UIAlertActionStyle.default) {
                        UIAlertAction in
                        NSLog("OK Pressed")
                    }
                    alertController.addAction(okAction)
                    self.window?.rootViewController?.present(alertController, animated: true, completion: nil)
                    
                })
                return
            }
            
            if let httpStatus = response as? HTTPURLResponse, httpStatus.statusCode != 200 {           // check for http errors
                //print("statusCode should be 200, but is \(httpStatus.statusCode)")
                //print("response = \(response)")
                DispatchQueue.main.async(execute: {
                    var alertController = UIAlertController(title: "Error", message: "Device in offline. Please try again later", preferredStyle: .actionSheet)
                    var okAction = UIAlertAction(title: "OK", style: UIAlertActionStyle.default) {
                        UIAlertAction in
                        NSLog("OK Pressed")
                    }
                    alertController.addAction(okAction)
                    self.window?.rootViewController?.present(alertController, animated: true, completion: nil)
                })
            }else{
                
                var jsonDictionary : NSMutableDictionary
                do {
                    jsonDictionary = try (JSONSerialization.jsonObject(with: data!, options: JSONSerialization.ReadingOptions()) as! NSDictionary).mutableCopy() as! NSMutableDictionary
                    //print("JSON data is",jsonDictionary)
                    DispatchQueue.main.async(execute: {
                        var datakeyed = NSKeyedArchiver.archivedData(withRootObject: jsonDictionary["building"] as! NSDictionary)
                        UserDefaults.standard.set(datakeyed, forKey: "building_details")
                        jsonDictionary.removeObject(forKey: "building")
                        datakeyed = NSKeyedArchiver.archivedData(withRootObject: jsonDictionary)
                        UserDefaults.standard.set(datakeyed, forKey: "performance_data")
                        UserDefaults.standard.set(1, forKey: "survey")
                        UserDefaults.standard.synchronize()
                        self.addsurveyattributes(leedid, key: key, loggedin : loggedin)
                    })
                } catch {
                    //print(error)
                    DispatchQueue.main.async(execute: {
                        var alertController = UIAlertController(title: "Error", message: "Something went wrong. Please try again later", preferredStyle: .actionSheet)
                        var okAction = UIAlertAction(title: "OK", style: UIAlertActionStyle.default) {
                            UIAlertAction in
                            NSLog("OK Pressed")
                        }
                        alertController.addAction(okAction)
                        self.window?.rootViewController?.present(alertController, animated: true, completion: nil)
                    })
                }
            }
            
        }) 
        task.resume()
    }

    func addsurveyattributes(_ leedid : String, key: String, loggedin : Bool){
        UserDefaults.standard.set(0, forKey: "swindex")
        let n = NSMutableArray()
        UserDefaults.standard.set(1, forKey: "transithide")
        UserDefaults.standard.set(1, forKey: "humanhide")
        UserDefaults.standard.set(0, forKey: "index")
        UserDefaults.standard.set(n, forKey: "mainarray")
        
        var notexists = 0
        // New Logic for storing the route values
        let lid = leedid
        //print("Trans array is \(transportationarray)")
        //print("Human array is \(humanexarray)")
        for i in 0..<transportationarray.count {
            let a = transportationarray[i] as! NSArray
            if (a.count == 2) {
                let leedid = a[0] as! String
                if lid == leedid {
                    UserDefaults.standard.set((a[1] as! NSArray).mutableCopy() as! NSMutableArray, forKey: "mainarray")
                    UserDefaults.standard.set("\(leedid)", forKey: "transportbuildingid")
                    notexists = 1
                    UserDefaults.standard.set(0, forKey: "transithide")
                    break
                }
            }
        }
        if (transportationarray.count == 0) || (notexists != 1) {
            UserDefaults.standard.set(leedid, forKey: "transportbuildingid")
        }
        notexists = 0
        for i in 0..<humanexarray.count {
            let a = humanexarray[i] as! NSArray
            if a.count == 2 {
                let leedid = a[0] as! String
                if lid == leedid {
                    UserDefaults.standard.set(a[1], forKey: "experiencearr")
                    UserDefaults.standard.set("\(leedid)", forKey: "humanbuildingid")
                    notexists = 1
                    UserDefaults.standard.set(0, forKey: "humanhide")
                    break
                }
            }
        }
        if humanexarray.count == 0 {
            var aa = [AnyObject]()
            let x = [AnyObject]()
            aa.append("5" as AnyObject)
            aa.append(x as AnyObject)
            UserDefaults.standard.set(aa, forKey: "experiencearr")
            humanexarray.add(aa)
            UserDefaults.standard.set(leedid, forKey: "humanbuildingid")
        }
        else if notexists != 1 {
            var aa = [AnyObject]()
            let x = [AnyObject]()
            aa.append("5" as AnyObject)
            aa.append(x as AnyObject)
            UserDefaults.standard.set(aa, forKey: "experiencearr")
            humanexarray.add(aa)
            UserDefaults.standard.set(leedid, forKey: "humanbuildingid")
        }
        var array = NSMutableArray()
        if(UserDefaults.standard.object(forKey: "temp") != nil){
            array = NSMutableArray.init(array: (UserDefaults.standard.object(forKey: "temp") as! NSArray).mutableCopy() as! NSMutableArray)
        }
        UserDefaults.standard.set(array, forKey: "temp")
        if(UserDefaults.standard.object(forKey: "image") != nil){
            array = NSMutableArray.init(array: (UserDefaults.standard.object(forKey: "image") as! NSArray).mutableCopy() as! NSMutableArray)
        }
        array.removeAllObjects()
        UserDefaults.standard.set(array, forKey: "image")
            UserDefaults.standard.set(key, forKey: "key")
        
        UserDefaults.standard.set(leedid, forKey: "leed_id")
        
        let hot=0;
        UserDefaults.standard.set(hot, forKey: "hot")
        UserDefaults.standard.set(hot, forKey: "dirty")
        UserDefaults.standard.set(hot, forKey: "dark")
        UserDefaults.standard.set(hot, forKey: "loud")
        UserDefaults.standard.set(hot, forKey: "smelly")
        UserDefaults.standard.set(hot, forKey: "cold")
        UserDefaults.standard.set(hot, forKey: "stuffy")
        UserDefaults.standard.set(hot, forKey: "privacy")
        UserDefaults.standard.set(hot, forKey: "other")
        UserDefaults.standard.set(hot, forKey: "glare")
        UserDefaults.standard.set("", forKey: "vvtext")
        UserDefaults.standard.set(hot, forKey: "iteration")
        UserDefaults.standard.set("", forKey: "smileyvalue")
        var dateformat = DateFormatter()
        if(UserDefaults.standard.object(forKey: "listofrowsforhuman") != nil){
            let ar = NSMutableArray.init(array: (UserDefaults.standard.object(forKey: "listofrowsforhuman") as! NSArray).mutableCopy() as! NSMutableArray)
            let current = UserDefaults.standard.integer(forKey: "humanbuildingid")
            dateformat = DateFormatter()
            dateformat.dateFormat = "dd/MM/YYYY"
            let date_string = dateformat.string(from: Date())
            for m in 0..<ar.count{
                let a = (ar.object(at: m) as! NSArray).mutableCopy() as! NSMutableArray
                let x = Int(a.object(at: 0) as! String)
                let date = a.object(at: 1) as! String
                if(x == current){
                    if(date_string == date){
                        UserDefaults.standard.set(0, forKey: "humanhide")
                        break
                    }else{
                        UserDefaults.standard.set(1, forKey: "humanhide")
                    }
                }else{
                    UserDefaults.standard.set(1, forKey: "humanhide")
                }
                
            }
        }
        self.gotomore(loggedin)

    }
    
    /*
    func application(_ application: UIApplication, open url: URL, sourceApplication: String?, annotation: Any) -> Bool {
        // ////print("application application: \(application.description), openURL: \(url.absoluteURL), sourceApplication: \(sourceApplication)")
        return AWSMobileClient.sharedInstance.withApplication(application, withURL: url, withSourceApplication: sourceApplication, withAnnotation: annotation as AnyObject)
    }*/
    
    func applicationWillResignActive(_ application: UIApplication) {
        // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.
        // Use this method to pause ongoing tasks, disable timers, and throttle down OpenGL ES frame rates. Games should use this method to pause the game.
    }
    
    func applicationDidEnterBackground(_ application: UIApplication) {
        // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later.
        // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.
        //launched = 0        
        //timer = NSTimer.scheduledTimerWithTimeInterval(1200.0, target: self, selector: #selector(self.needsvalidation), userInfo: nil, repeats: false)
    }
    
    
    func applicationDidBecomeActive(_ application: UIApplication) {
        // Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.
        //AWSMobileClient.sharedInstance.applicationDidBecomeActive(application)
    }
    
    func applicationWillTerminate(_ application: UIApplication) {
        // Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:.
    }
    
    
    
    func applicationWillEnterForeground(_ application: UIApplication) {
        // Called as part of the transition from the background to the inactive state; here you can undo many of the changes made on entering the background.
        UIApplication.shared.applicationIconBadgeNumber = 0
    }
    
    func signin() {
        if(UserDefaults.standard.object(forKey: "username") != nil && UserDefaults.standard.object(forKey: "password") != nil){
        var username = UserDefaults.standard.object(forKey: "username") as! String
        var password = UserDefaults.standard.object(forKey: "password") as! String
        username = "testuser@gmail.com"
        password = "initpass"
        var credential = credentials()
        var domain_url=credential.domain_url
        ////print("subscription key of LEEDOn ",credential.subscription_key)
        var url = URL.init(string: String(format: "%@auth/login/",domain_url))
        var request = NSMutableURLRequest.init(url: url!)
        request.httpMethod = "POST"
        request.addValue(credential.subscription_key, forHTTPHeaderField:"Ocp-Apim-Subscription-Key" )
        request.addValue("application/json", forHTTPHeaderField:"Content-type" )
        var httpbody = String(format: "{\"username\":\"%@\",\"password\":\"%@\"}",username,password)
        request.httpBody = httpbody.data(using: String.Encoding.utf8)
        ////print("HEadre is ",httpbody)
        ////print(request.allHTTPHeaderFields)
        
        let task = URLSession.shared.dataTask(with: request as URLRequest, completionHandler: { data, response, error in
            guard error == nil && data != nil else {                                                          // check for fundamental networking error
                ////print("error=\(error)")
                NotificationCenter.default.post(name: Notification.Name(rawValue: "notifyclose"), object: nil)
                return
            }
            
            if let httpStatus = response as? HTTPURLResponse, httpStatus.statusCode != 200 {           // check for http errors
                ////print("statusCode should be 200, but is \(httpStatus.statusCode)")
                ////print("response = \(response)")
                NotificationCenter.default.post(name: Notification.Name(rawValue: "notifyclose"), object: nil)
                
            }else{
                //
                var jsonDictionary : NSDictionary
                do {
                    jsonDictionary = try JSONSerialization.jsonObject(with: data!, options: JSONSerialization.ReadingOptions()) as! NSDictionary
                    ////print("JSON data is",jsonDictionary)
                    if(jsonDictionary.value(forKey: "token_type") as! String == "Bearer"){
                        UserDefaults.standard.set(username, forKey: "username")
                        UserDefaults.standard.set(password, forKey: "password")
                        UserDefaults.standard.set(jsonDictionary.value(forKey: "authorization_token") as! String, forKey: "token")
                    }
                    DispatchQueue.main.async(execute: {
                        
                    })
                    
                } catch {
                    ////print(error)
                    NotificationCenter.default.post(name: Notification.Name(rawValue: "notifyclose"), object: nil)
                                        
                    
                }
            }
            
        }) 
        task.resume()
        }
    }
    
    /*
    func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {
        AWSMobileClient.sharedInstance.application(application, didRegisterForRemoteNotificationsWithDeviceToken: deviceToken)
    }
    
    func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {
        AWSMobileClient.sharedInstance.application(application, didFailToRegisterForRemoteNotificationsWithError: error as NSError)
    }
    
    func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable: Any]) {
        AWSMobileClient.sharedInstance.application(application, didReceiveRemoteNotification: userInfo)
    }*/
    
}

// MARK:- UITableViewDelegate

/*extension AppDelegate: UITableViewDelegate {
    
    func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return AWSPushManager.defaultPushManager().topics.count
    }
    
    func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {
        let pushManager = AWSPushManager.defaultPushManager()
        if pushManager.enabled {
            let topic = pushManager.topics[indexPath.row]
            if topic.subscribed {
                // Unsubscribe
                let alertController = UIAlertController(title: "Please Confirm", message: "Do you want to unsubscribe from the topic?", preferredStyle: .Alert)
                let unsubscribeAction = UIAlertAction(title: "Unsubscribe", style: .Default, handler: {(action: UIAlertAction) -> Void in
                    let topic = AWSPushManager.defaultPushManager().topics[indexPath.row]
                    topic.unsubscribe()
                })
                let cancelAction = UIAlertAction(title: "Cancel", style: .Cancel, handler: nil)
                alertController.addAction(unsubscribeAction)
                alertController.addAction(cancelAction)
                presentViewController(alertController, animated: true, completion: nil)
            } else {
                // Subscribe
                topic.subscribe()
            }
        }
    }
   
    
}*/

// MARK:- UITableViewDataSource



// MARK:- AWSPushManagerDelegate


extension UIApplication {
    class func topViewController(_ base: UIViewController? = UIApplication.shared.keyWindow?.rootViewController) -> UIViewController? {
        if let nav = base as? UINavigationController {
            return topViewController(nav.visibleViewController)
        }
        if let tab = base as? UITabBarController {
            let moreNavigationController = tab.moreNavigationController
            
            if let top = moreNavigationController.topViewController, top.view.window != nil {
                return topViewController(top)
            } else if let selected = tab.selectedViewController {
                return topViewController(selected)
            }
        }
        if let presented = base?.presentedViewController {
            return topViewController(presented)
        }
        return base
    }
}

// MARK:- Utility methods


